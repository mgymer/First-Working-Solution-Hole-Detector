======================================================================
HARD CANONICAL SOURCE — GolfAIApp Swift
USE THIS DUMP ONLY. IGNORE ALL EARLIER DUMPS, SCREENSHOTS, OR CHAT CODE.
IF ANY SNIPPET CONFLICTS WITH THIS FILE, THIS FILE WINS.

Repo: https://github.com/mgymer/First-Working-Solution-Hole-Detector.git
Commit: 5e56104
Timestamp: Fri 22 Aug 2025 09:01:42 UTC  (UTC)
======================================================================


Array+Safe.swift
FILE: /Users/martingymer/Developer/GolfAIAppClean/Array+Safe.swift

extension Array {
    subscript(safe index: Index) -> Element? {
        indices.contains(index) ? self[index] : nil
    }
}



BallModelPredictor.swift
FILE: /Users/martingymer/Developer/GolfAIAppClean/BallModelPredictor.swift

import Foundation
import Vision
import CoreML
import CoreVideo
import ImageIO // CGImagePropertyOrientation

/// Runs the BallDetectorBEST.mlpackage and emits label "ball".
final class BallModelPredictor: Predictor {
    static let shared = BallModelPredictor()

    private let vnModel: VNCoreMLModel
    private let confidenceThreshold: VNConfidence = 0.10

    private init() {
        do {
            // Load the *compiled* model from the app bundle.
            // (Works regardless of the auto-generated Swift class name.)
            guard let url = Bundle.main.url(forResource: "BallDetectorBEST", withExtension: "mlmodelc") else {
                fatalError("❌ BallDetectorBEST.mlmodelc not found in bundle. Check target membership + Copy Bundle Resources.")
            }
            let mlModel = try MLModel(contentsOf: url)
            self.vnModel = try VNCoreMLModel(for: mlModel)
        } catch {
            fatalError("❌ Failed to load BallDetectorBEST model: \(error)")
        }
    }

    // MARK: - Predictor (no EXIF)
    func predict(pixelBuffer: CVPixelBuffer) -> [Prediction] {
        predict(pixelBuffer: pixelBuffer, exifOrientation: .up)
    }

    // MARK: - Public helpers (EXIF aware)
    func predict(pixelBuffer: CVPixelBuffer,
                 exifOrientation: CGImagePropertyOrientation) -> [Prediction] {
        predict(pixelBuffer: pixelBuffer, exifOrientation: exifOrientation, using: .scaleFit)
    }

    func predictTryingCrops(pixelBuffer: CVPixelBuffer,
                            exifOrientation: CGImagePropertyOrientation) -> [Prediction] {
        for crop in [VNImageCropAndScaleOption.scaleFit, .centerCrop, .scaleFill] {
            let r = predict(pixelBuffer: pixelBuffer, exifOrientation: exifOrientation, using: crop)
            if !r.isEmpty { return r }
        }
        return []
    }

    // MARK: - Core Vision invocation
    private func predict(pixelBuffer: CVPixelBuffer,
                         exifOrientation: CGImagePropertyOrientation,
                         using crop: VNImageCropAndScaleOption) -> [Prediction] {
        var out: [Prediction] = []

        let request = VNCoreMLRequest(model: vnModel) { [confidenceThreshold] req, err in
            if let err = err {
                print("❌ Vision (ball) error:", err)
                return
            }
            guard let obs = req.results as? [VNRecognizedObjectObservation] else { return }

            for o in obs {
                let conf = o.labels.first?.confidence ?? o.confidence
                guard conf >= confidenceThreshold else { continue }
                // 🔹 Force a stable label so UI filters work
                out.append(Prediction(label: "ball",
                                      confidence: conf,
                                      boundingBox: o.boundingBox))
            }
        }

        request.imageCropAndScaleOption = crop

        let handler = VNImageRequestHandler(cvPixelBuffer: pixelBuffer,
                                            orientation: exifOrientation,
                                            options: [:])
        do { try handler.perform([request]) }
        catch { print("❌ Vision perform (ball) error:", error) }

        return out
    }
}



BoundingBoxView.swift
FILE: /Users/martingymer/Developer/GolfAIAppClean/BoundingBoxView.swift

import SwiftUI

struct BoundingBoxView: View {
    let boxes: [CGRect]       // Normalized rects (0–1, Vision-style)
    let labels: [String]
    let color: Color

    var body: some View {
        GeometryReader { geometry in
            ForEach(boxes.indices, id: \.self) { index in
                drawBox(
                    boxes[index],
                    label: labels[safe: index] ?? "",
                    in: geometry.size
                )
            }
        }
        .allowsHitTesting(false)  // Bounding boxes don’t intercept taps
        .drawingGroup()           // GPU compositing for smoother rendering
    }

    @ViewBuilder
    private func drawBox(_ box: CGRect, label: String, in size: CGSize) -> some View {
        ZStack(alignment: .topLeading) {
            Rectangle()
                .stroke(color, lineWidth: 2)
                .frame(
                    width: box.width * size.width,
                    height: box.height * size.height
                )
                .position(
                    x: box.midX * size.width,
                    y: (1 - box.midY) * size.height // Flip Y axis
                )

            Text(label)
                .font(.caption)
                .padding(2)
                .background(Color.black.opacity(0.6))
                .foregroundColor(color)
                .position(
                    x: box.midX * size.width,
                    y: (1 - box.midY) * size.height - 10
                )
        }
    }
}

// MARK: - Safe Array Access Helper






CameraPreview.swift
FILE: /Users/martingymer/Developer/GolfAIAppClean/CameraPreview.swift

import SwiftUI
import AVFoundation

struct CameraPreview: UIViewRepresentable {
    let session: AVCaptureSession

    func makeUIView(context: Context) -> UIView {
        let view = UIView(frame: .zero)

        let previewLayer = AVCaptureVideoPreviewLayer(session: session)
        previewLayer.videoGravity = .resizeAspectFill

        // ✅ Set the preview layer’s connection rotation (iOS 17+ API)
        if let conn = previewLayer.connection,
           conn.isVideoRotationAngleSupported(0) {
            conn.videoRotationAngle = 0   // portrait
        }

        previewLayer.frame = view.bounds
        view.layer.addSublayer(previewLayer)

        // keep layer sized to view
        DispatchQueue.main.async {
            previewLayer.frame = view.bounds
        }

        return view
    }

    func updateUIView(_ uiView: UIView, context: Context) {
        if let previewLayer = uiView.layer.sublayers?.first as? AVCaptureVideoPreviewLayer {
            previewLayer.frame = uiView.bounds
        }
    }
}



CameraService.swift
FILE: /Users/martingymer/Developer/GolfAIAppClean/CameraService.swift

import Foundation
import AVFoundation
import Vision
import Combine
import ImageIO   // CGImagePropertyOrientation

final class CameraService: NSObject, ObservableObject, AVCaptureVideoDataOutputSampleBufferDelegate {

    // MARK: - ObservableObject
    // We don’t actually publish any state yet, but @StateObject in ContentView
    // expects an ObservableObject. Supplying the publisher satisfies the protocol.
    let objectWillChange = ObservableObjectPublisher()

    // MARK: - Capture
    private let session = AVCaptureSession()
    private let videoOutput = AVCaptureVideoDataOutput()
    private var input: AVCaptureDeviceInput!

    // simple throttle (~5 fps). Tweak or remove if you like.
    private var lastPredictionTime: Date = .distantPast
    private let frameGap: TimeInterval = 0.20

    private weak var viewModel: DetectionViewModel?

    public func getSession() -> AVCaptureSession { session }

    func start(viewModel: DetectionViewModel) {
        self.viewModel = viewModel

        guard
            let device = AVCaptureDevice.default(.builtInWideAngleCamera, for: .video, position: .back),
            let input = try? AVCaptureDeviceInput(device: device)
        else {
            print("❌ Could not create AVCaptureDeviceInput")
            return
        }

        self.input = input

        session.beginConfiguration()
        session.sessionPreset = .high

        if session.canAddInput(input) { session.addInput(input) }

        videoOutput.alwaysDiscardsLateVideoFrames = true
        videoOutput.videoSettings = [
            kCVPixelBufferPixelFormatTypeKey as String: kCVPixelFormatType_32BGRA
        ]
        videoOutput.setSampleBufferDelegate(self, queue: DispatchQueue(label: "videoQueue"))

        if session.canAddOutput(videoOutput) { session.addOutput(videoOutput) }

        // Orientation after adding the output
        if let conn = videoOutput.connection(with: .video) {
            if #available(iOS 17.0, *) {
                if conn.isVideoRotationAngleSupported(0) {
                    conn.videoRotationAngle = 0    // portrait
                }
            } else {
                if conn.isVideoOrientationSupported {
                    conn.videoOrientation = .portrait
                }
            }
        }

        session.commitConfiguration()
        startSession()
    }

    public func startSession() {
        DispatchQueue.global(qos: .userInitiated).async { self.session.startRunning() }
    }

    public func stop() {
        DispatchQueue.global(qos: .userInitiated).async {
            if self.session.isRunning { self.session.stopRunning() }
        }
    }

    // MARK: - Frame Capture
    func captureOutput(_ output: AVCaptureOutput,
                       didOutput sampleBuffer: CMSampleBuffer,
                       from connection: AVCaptureConnection) {

        // throttle
        let now = Date()
        guard now.timeIntervalSince(lastPredictionTime) >= frameGap else { return }
        lastPredictionTime = now

        guard let pixelBuffer = CMSampleBufferGetImageBuffer(sampleBuffer) else { return }

        // Compute EXIF orientation for Vision based on iOS version
        let exif: CGImagePropertyOrientation
        if #available(iOS 17.0, *) {
            // 17+: we have a concrete rotation angle in degrees (0, 90, 180, 270)
            exif = exifFromRotationAngle(connection.videoRotationAngle, cameraPosition: .back)
        } else {
            // 16−: fall back to the old videoOrientation mapping
            exif = exifFromVideoOrientation(connection.videoOrientation, cameraPosition: .back)
        }

        // Run the model (Vision will handle resizing)
        let predictions = CombinedPredictor.shared.predictTryingCrops(pixelBuffer: pixelBuffer,
                                                                     exifOrientation: exif)


        if !predictions.isEmpty {
            print("Labels seen:", Set(predictions.map { $0.label }))
        }

        DispatchQueue.main.async { [weak self] in
            self?.viewModel?.update(with: predictions)
        }
    }
}

// MARK: - EXIF helpers

@available(iOS 17.0, *)
private func exifFromRotationAngle(_ angle: CGFloat,
                                   cameraPosition: AVCaptureDevice.Position) -> CGImagePropertyOrientation {
    // angle is usually 0, 90, 180, 270 (clockwise)
    switch Int(angle) % 360 {
    case 0:    // portrait
        return .right
    case 90:   // landscapeRight
        // Home/bottom on the right
        return (cameraPosition == .front) ? .down : .up
    case 180:  // portraitUpsideDown
        return .left
    case 270:  // landscapeLeft
        // Home/bottom on the left
        return (cameraPosition == .front) ? .up : .down
    default:
        return .right
    }
}

@available(iOS, introduced: 13.0, deprecated: 17.0)
private func exifFromVideoOrientation(_ vo: AVCaptureVideoOrientation,
                                      cameraPosition: AVCaptureDevice.Position) -> CGImagePropertyOrientation {
    switch vo {
    case .portrait:
        return .right
    case .portraitUpsideDown:
        return .left
    case .landscapeRight:
        // Home/bottom on the right
        return cameraPosition == .front ? .down : .up
    case .landscapeLeft:
        // Home/bottom on the left
        return cameraPosition == .front ? .up : .down
    @unknown default:
        return .right
    }
}




CombinedPredictor.swift
FILE: /Users/martingymer/Developer/GolfAIAppClean/CombinedPredictor.swift

import CoreVideo
import ImageIO

/// Calls both predictors and returns a concatenated list.
final class CombinedPredictor: Predictor {
    static let shared = CombinedPredictor()
    private init() {}

    func predict(pixelBuffer: CVPixelBuffer) -> [Prediction] {
        predict(pixelBuffer: pixelBuffer, exifOrientation: .up)
    }

    func predict(pixelBuffer: CVPixelBuffer,
                 exifOrientation: CGImagePropertyOrientation) -> [Prediction] {
        let holes = YOLOPredictor.shared.predict(pixelBuffer: pixelBuffer,
                                                 exifOrientation: exifOrientation)
        let balls = BallModelPredictor.shared.predict(pixelBuffer: pixelBuffer,
                                                      exifOrientation: exifOrientation)
        return holes + balls
    }

    func predictTryingCrops(pixelBuffer: CVPixelBuffer,
                            exifOrientation: CGImagePropertyOrientation) -> [Prediction] {
        let holes = YOLOPredictor.shared.predictTryingCrops(pixelBuffer: pixelBuffer,
                                                            exifOrientation: exifOrientation)
        let balls = BallModelPredictor.shared.predictTryingCrops(pixelBuffer: pixelBuffer,
                                                                 exifOrientation: exifOrientation)
        return holes + balls
    }
}



ContentView.swift
FILE: /Users/martingymer/Developer/GolfAIAppClean/ContentView.swift

import SwiftUI

struct ContentView: View {
    @StateObject var viewModel = DetectionViewModel(predictor: CombinedPredictor.shared)
    @StateObject var cameraService = CameraService()

    var body: some View {
        ZStack {
            // Live camera preview
            CameraPreview(session: cameraService.getSession())
                .ignoresSafeArea()

            // HOLES (blue)
            BoundingBoxView(
                boxes:  viewModel.predictions
                    .filter { $0.label == "hole" }
                    .map { $0.boundingBox },
                labels: viewModel.predictions
                    .filter { $0.label == "hole" }
                    .map { "hole \(Int($0.confidence * 100))%" },
                color: .blue
            )
            .ignoresSafeArea()
            .zIndex(0)

            // BALLS (green) on top
            BoundingBoxView(
                boxes:  viewModel.predictions
                    .filter { $0.label == "ball" }
                    .map { $0.boundingBox },
                labels: viewModel.predictions
                    .filter { $0.label == "ball" }
                    .map { "ball \(Int($0.confidence * 100))%" },
                color: .green
            )
            .ignoresSafeArea()
            .zIndex(1)

            // Debug overlay text at bottom
            VStack {
                Spacer()
                Text(viewModel.debugMessage)
                    .font(.caption)
                    .foregroundColor(.white)
                    .padding(8)
                    .background(Color.black.opacity(0.6))
                    .cornerRadius(8)
                    .padding(.bottom, 20)
            }
        }
        .overlay(
            VStack {
                HStack {
                    Button("▶️ Test Box") {
                        let fake = Prediction(
                            label: "test",
                            confidence: 0.9,
                            boundingBox: CGRect(x: 0.45, y: 0.45, width: 0.10, height: 0.10)
                        )
                        viewModel.update(with: [fake])
                    }
                    .padding(8)
                    .background(Color.black.opacity(0.6))
                    .foregroundColor(.white)
                    .cornerRadius(8)

                    Spacer()
                }
                Spacer()
            }
            .padding(),
            alignment: .topLeading
        )
        .onAppear { cameraService.start(viewModel: viewModel) }
        .onDisappear { cameraService.stop() }
    }
}



DetectionViewModel.swift
FILE: /Users/martingymer/Developer/GolfAIAppClean/DetectionViewModel.swift

import Combine
import UIKit

@MainActor
final class DetectionViewModel: NSObject, ObservableObject {
    @Published var predictions: [Prediction] = []
    @Published var debugMessage: String = "Awaiting input..."

    private let predictor: Predictor
    private var lastNonEmpty = Date.distantPast
    var holdSeconds: TimeInterval = 0.7

    // No default here anymore
    init(predictor: Predictor) {
        self.predictor = predictor
        super.init()
    }

    func update(with new: [Prediction]) {
        if new.isEmpty {
            if Date().timeIntervalSince(lastNonEmpty) < holdSeconds { return }
            predictions = []
            debugMessage = "⚠️ No predictions"
        } else {
            lastNonEmpty = Date()
            predictions = new
            debugMessage = "✅ \(new.count) object(s) detected"
        }
    }
}



GolfAIApp.swift
FILE: /Users/martingymer/Developer/GolfAIAppClean/GolfAIApp.swift


import SwiftUI

@main
struct GolfAIApp: App {
    var body: some Scene {
        WindowGroup {
            ContentView()  // ← this runs live camera detection
        }
    }
}



GolfAIAppTests:DetectionViewModelTests.swift
FILE: /Users/martingymer/Developer/GolfAIAppClean/GolfAIAppTests:DetectionViewModelTests.swift

import XCTest
@testable import GolfAIApp

@MainActor
final class DetectionViewModelTests: XCTestCase {

    func test_update_noPredictions_setsWarning() {
        let vm = DetectionViewModel(predictor: FakePredictor(fakeResults: []))
        vm.update(with: [])
        XCTAssertEqual(vm.predictions.count, 0)
        XCTAssertTrue(vm.debugMessage.contains("No predictions"))
    }

    func test_update_onePrediction_setsSuccess() {
        let p = Prediction(label: "golf_ball", confidence: 0.91,
                           boundingBox: .init(x: 0.45, y: 0.55, width: 0.10, height: 0.10))
        let vm = DetectionViewModel(predictor: FakePredictor(fakeResults: [p]))
        vm.update(with: [p])
        XCTAssertEqual(vm.predictions.count, 1)
        XCTAssertTrue(vm.debugMessage.contains("1 object"))
    }
}



GolfAIAppTests:FakePredictor.swift
FILE: /Users/martingymer/Developer/GolfAIAppClean/GolfAIAppTests:FakePredictor.swift

import CoreVideo
@testable import GolfAIApp

struct FakePredictor: Predictor {
    let fakeResults: [Prediction]
    func predict(pixelBuffer: CVPixelBuffer) -> [Prediction] { fakeResults }
}



LaunchScreenView.swift
FILE: /Users/martingymer/Developer/GolfAIAppClean/LaunchScreenView.swift

import SwiftUI

struct LaunchScreenView: View {
    @State private var isActive = false

    var body: some View {
        Group {
            if isActive {
                ContentView()  // main app view
            } else {
                VStack(spacing: 20) {
                    Image("test_golf") // from your xcassets
                        .resizable()
                        .scaledToFit()
                        .frame(width: 150, height: 150)

                    Text("Golf Hole Detector")
                        .font(.title)
                        .bold()
                        .foregroundColor(.green)

                    ProgressView()
                        .progressViewStyle(CircularProgressViewStyle())
                }
                .frame(maxWidth: .infinity, maxHeight: .infinity)
                .background(Color.white)
                .onAppear {
                    DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
                        withAnimation {
                            isActive = true
                        }
                    }
                }
            }
        }
    }
}



ModelTest.swift
FILE: /Users/martingymer/Developer/GolfAIAppClean/ModelTest.swift

// ModelTest.swift – leave in project (no test target membership needed)
import SwiftUI
import UIKit

struct ModelTest: View {
    @StateObject private var viewModel: DetectionViewModel

    init() {
        _viewModel = StateObject(wrappedValue: DetectionViewModel(predictor: YOLOPredictor.shared))
    }

    var body: some View {
        VStack {
            if let img = UIImage(named: "test_sample") {
                Image(uiImage: img)
                    .resizable()
                    .scaledToFit()
                    .overlay(
                        BoundingBoxView(
                            boxes: viewModel.predictions.map { $0.boundingBox },
                            labels: viewModel.predictions.map {
                                let pct = Int(($0.confidence as Float) * 100)
                                return "\($0.label) \(pct)%"
                            },
                            color: .red
                        )
                    )
                    .onAppear {
                        let size = CGSize(width: 640, height: 640)
                        if let resized = img.resized(to: size),
                           let pb = resized.toCVPixelBuffer(size: size) {
                            
                            print("📸 Test image resized and converted to CVPixelBuffer ✅")
                            
                            let results = YOLOPredictor.shared.predictTryingCrops(pixelBuffer: pb, exifOrientation: .up)
                            
                            print("🧠 Prediction count: \(results.count)")
                            for prediction in results {
                                print("→ Label: \(prediction.label), Confidence: \(prediction.confidence), Box: \(prediction.boundingBox)")
                            }
                            
                            viewModel.update(with: results)
                        } else {
                            print("⚠️ Could not create CVPixelBuffer from test image")
                            viewModel.update(with: [])
                        }
                    }
            } else {
                Text("❌ test_sample not found")
            }
        }
        .padding()
    }
}




PixelBuffer+Resize.swift
FILE: /Users/martingymer/Developer/GolfAIAppClean/PixelBuffer+Resize.swift

import CoreVideo
import CoreImage
import UIKit

extension CVPixelBuffer {
    func resized(to size: CGSize) -> CVPixelBuffer? {
        let ciImage = CIImage(cvPixelBuffer: self)
        let scaleX = size.width / CGFloat(CVPixelBufferGetWidth(self))
        let scaleY = size.height / CGFloat(CVPixelBufferGetHeight(self))
        let transform = CGAffineTransform(scaleX: scaleX, y: scaleY)
        let resizedImage = ciImage.transformed(by: transform)

        let context = CIContext()
        var resizedBuffer: CVPixelBuffer?

        let attrs: [CFString: Any] = [
            kCVPixelBufferCGImageCompatibilityKey: true,
            kCVPixelBufferCGBitmapContextCompatibilityKey: true
        ]

        CVPixelBufferCreate(
            kCFAllocatorDefault,
            Int(size.width),
            Int(size.height),
            kCVPixelFormatType_32BGRA,
            attrs as CFDictionary,
            &resizedBuffer
        )

        guard let buffer = resizedBuffer else {
            print("❌ Failed to create resized pixel buffer")
            return nil
        }

        context.render(resizedImage, to: buffer)
        return buffer
    }
}




PredictionResult.swift
FILE: /Users/martingymer/Developer/GolfAIAppClean/PredictionResult.swift

import Foundation
import CoreGraphics

struct Prediction {
    let label: String
    let confidence: Float
    let boundingBox: CGRect
}



Predictor.swift
FILE: /Users/martingymer/Developer/GolfAIAppClean/Predictor.swift

import CoreVideo

@preconcurrency
protocol Predictor {
    func predict(pixelBuffer: CVPixelBuffer) -> [Prediction]
}



UIImageResize.swift
FILE: /Users/martingymer/Developer/GolfAIAppClean/UIImageResize.swift

import UIKit
import CoreVideo

extension UIImage {
    
    // Resize UIImage to target size
    func resized(to targetSize: CGSize) -> UIImage? {
        UIGraphicsBeginImageContextWithOptions(targetSize, false, 1.0)
        self.draw(in: CGRect(origin: .zero, size: targetSize))
        let resizedImage = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        return resizedImage
    }

    // Convert UIImage to CVPixelBuffer for ML model
    func toCVPixelBuffer(size: CGSize) -> CVPixelBuffer? {
        var pixelBuffer: CVPixelBuffer?
        let attrs: [CFString: Any] = [
            kCVPixelBufferCGImageCompatibilityKey: true,
            kCVPixelBufferCGBitmapContextCompatibilityKey: true
        ]

        let status = CVPixelBufferCreate(
            kCFAllocatorDefault,
            Int(size.width),
            Int(size.height),
            kCVPixelFormatType_32ARGB,
            attrs as CFDictionary,
            &pixelBuffer
        )

        guard status == kCVReturnSuccess, let buffer = pixelBuffer else {
            return nil
        }

        CVPixelBufferLockBaseAddress(buffer, [])
        defer { CVPixelBufferUnlockBaseAddress(buffer, []) }

        guard let context = CGContext(
            data: CVPixelBufferGetBaseAddress(buffer),
            width: Int(size.width),
            height: Int(size.height),
            bitsPerComponent: 8,
            bytesPerRow: CVPixelBufferGetBytesPerRow(buffer),
            space: CGColorSpaceCreateDeviceRGB(),
            bitmapInfo: CGImageAlphaInfo.noneSkipFirst.rawValue
        ) else {
            return nil
        }

        UIGraphicsPushContext(context)
        self.draw(in: CGRect(origin: .zero, size: size))
        UIGraphicsPopContext()

        return buffer
    }
}



YOLOPredictor.swift
FILE: /Users/martingymer/Developer/GolfAIAppClean/YOLOPredictor.swift

import Foundation
import Vision
import CoreML
import CoreVideo
import ImageIO   // CGImagePropertyOrientation

// MARK: - Predictor implementation
final class YOLOPredictor: Predictor {
    static let shared = YOLOPredictor()

    private let vnModel: VNCoreMLModel
    private let confidenceThreshold: VNConfidence = 0.05

    private init() {
        do {
            let ml = try GolfHoleDetector(configuration: MLModelConfiguration()).model
            self.vnModel = try VNCoreMLModel(for: ml)
        } catch {
            fatalError("❌ Failed to load GolfHoleDetector.mlpackage: \(error)")
        }
    }

    func predict(pixelBuffer: CVPixelBuffer) -> [Prediction] {
        return predict(pixelBuffer: pixelBuffer, exifOrientation: .up)
    }
}

// MARK: - Public helpers
extension YOLOPredictor {
    func predict(pixelBuffer: CVPixelBuffer,
                 exifOrientation: CGImagePropertyOrientation) -> [Prediction] {
        return predict(pixelBuffer: pixelBuffer,
                       exifOrientation: exifOrientation,
                       using: .scaleFit)
    }

    func predictTryingCrops(pixelBuffer: CVPixelBuffer,
                            exifOrientation: CGImagePropertyOrientation) -> [Prediction] {
        let order: [VNImageCropAndScaleOption] = [.scaleFit, .centerCrop, .scaleFill]
        for crop in order {
            let res = predict(pixelBuffer: pixelBuffer, exifOrientation: exifOrientation, using: crop)
            if !res.isEmpty {
                print("✅ Using crop (hole):", crop.rawValue)
                return res
            }
        }
        print("❌ No hole detections with any crop mode")
        return []
    }
}

// MARK: - Core Vision invocation (with crop mode)
private extension YOLOPredictor {
    func predict(pixelBuffer: CVPixelBuffer,
                 exifOrientation: CGImagePropertyOrientation,
                 using crop: VNImageCropAndScaleOption) -> [Prediction] {

        var out: [Prediction] = []

        let request = VNCoreMLRequest(model: vnModel) { [confidenceThreshold] req, err in
            if let err = err {
                print("❌ Vision (hole) error:", err)
                return
            }

            guard let obs = req.results as? [VNRecognizedObjectObservation] else { return }

            // Optional debug
            print("🔎 (hole) obsCount:", obs.count)
            for o in obs.prefix(3) {
                let tops = o.labels.prefix(3).map { "\($0.identifier)=\($0.confidence)" }
                print("  ↳", tops.joined(separator: ", "), "box:", o.boundingBox)
            }

            for o in obs {
                let conf = o.labels.first?.confidence ?? o.confidence
                guard conf >= confidenceThreshold else { continue }

                // 🔹 Force a stable label for holes
                out.append(Prediction(label: "hole",
                                      confidence: conf,
                                      boundingBox: o.boundingBox))
            }
        }

        request.imageCropAndScaleOption = crop

        let handler = VNImageRequestHandler(cvPixelBuffer: pixelBuffer,
                                            orientation: exifOrientation,
                                            options: [:])
        do { try handler.perform([request]) }
        catch { print("❌ Vision perform (hole) error:", error) }

        return out
    }
}



deviceSupportsLiDAR.swift
FILE: /Users/martingymer/Developer/GolfAIAppClean/deviceSupportsLiDAR.swift

import ARKit

func deviceSupportsLiDAR() -> Bool {
    // Check if the device has a LiDAR sensor
    return ARWorldTrackingConfiguration.supportsFrameSemantics(.sceneDepth)
}


